<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Redis on abtswath</title><link>https://www.abtswath.com/categories/redis/</link><description>Recent content in Redis on abtswath</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 22 Jul 2021 21:01:01 +0000</lastBuildDate><atom:link href="https://www.abtswath.com/categories/redis/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis 分布式锁之 RedLock</title><link>https://www.abtswath.com/redis-distributed-lock/</link><pubDate>Thu, 22 Jul 2021 21:01:01 +0000</pubDate><guid>https://www.abtswath.com/redis-distributed-lock/</guid><description>使用场景 分布式场景下保证同一时刻内只能有一个客户端对资源进行操作。
保证分布式锁有效性及安全性的要求 互斥性：任何时刻只能有一个客户端持有锁。 可重入：总是可以获取锁，即使锁定资源的客户端崩溃，避免死锁。 高可用：只要大多数 Redis 节点已启动，客户端就可以获取锁和释放锁。 获取锁 以毫秒为单位获取当前时间戳。 以相同的键名和值尝试获取所有实例的锁。 客户端以当前时间减去开始获取锁的时间得到锁使用的时间。当大多数Redis节点（N/2+1）获取到锁并且锁使用时间小于锁的失效时间，锁才算获取成功。 如果获取到锁，锁的真正有效时间为步骤三计算结果。 如果获取锁失败，客户端应该在所有实例上进行解锁。 释放锁 向所有的 Redis 实例发送释放锁的命令，不用关心之前有没有成功获取到锁。</description></item></channel></rss>