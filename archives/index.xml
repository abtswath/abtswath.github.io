<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Archives on abtswath</title><link>https://www.abtswath.com/archives/</link><description>Recent content in Archives on abtswath</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 21 Oct 2022 17:33:32 +0800</lastBuildDate><atom:link href="https://www.abtswath.com/archives/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 切片扩容</title><link>https://www.abtswath.com/archives/go-growslice/</link><pubDate>Fri, 21 Oct 2022 17:33:32 +0800</pubDate><guid>https://www.abtswath.com/archives/go-growslice/</guid><description>1.18 之前 当前容量小于 1024 时，新容量为当前容量的两倍； 当前容量大于等于 1024 时，新容量为当前容量的 1.25 倍。 1.18之后 当前容量小于 256 时，新容量为当前容量两倍； 当前容量大于等于 256 时，新容量计算公式为 当前容量 + (当前容量 + 3 * 256) / 4。 https://github.com/golang/go/commit/2dda92ff6f9f07eeb110ecbf0fc2d7a0ddd27f9d https://groups.google.com/g/golang-nuts/c/UaVlMQ8Nz3o</description></item><item><title>Go 内存管理</title><link>https://www.abtswath.com/archives/go-memory-allocator/</link><pubDate>Fri, 21 Oct 2022 17:16:23 +0800</pubDate><guid>https://www.abtswath.com/archives/go-memory-allocator/</guid><description>内存分配策略 链表空间分配器之隔离适应策略 将内存分为多个内存块相同的链表，分配内存时先找到符合要求的链表，再去链表中找到合适的内存块。
多级缓存 线程缓存、中心缓存、页堆。32KB 以下的对象，选择线程缓存，线程缓存不能满足需求时，将对象分配到中心缓存；32KB 以上的对象，选择页堆。
线程缓存属于每一个线程，不涉及多线程访问，不需要互斥锁；访问中心缓存需要互斥锁。
内存分配 根据对象类型（微对象、小对象、大对象）不同，选择不同分配策略 微对象 (0, 16B) - 先使用微型分配器，再依次尝试线程缓存、中心缓存和堆分配内存。 小对象 (16B, 32KB) - 依次尝试使用线程缓存、中心缓存和堆分配内存。 大对象 (32KB,) - 直接在堆上分配内存。 微对象 使用线程缓存上的微分配器提高微对象分配的性能，主要用来分配较小的字符串以及逃逸的临时变量。将多个较小的内存分配合并到一个内存块上，直到内存块中所有的对象都需要被回收时，内存块才会被回收。
微型分配器管理的对象不可以是指针类型。
小对象 16B ~ 32KB 大小的对象以及小于 16B 的指针类型对象。首先确定分配对象的大小及跨度类，再依次从线程缓存、中心缓存或者堆中获取内存管理单元并从内存管理单元找到空闲的内存空间。
大对象 计算该对象所需页数，按照 8KB 的倍数在堆上申请内存。
垃圾回收 Go1.3 前的标记 - 清除算法 标记：从根对象出发查找并标记堆中所有存活的对象； 清除：遍历堆中的全部对象，回收未被标记的垃圾对象并将回收的内存加入空闲链表。 缺点 需要 STW (Stop the world)，让程序暂停，程序出现卡顿； 需要扫描整个堆； 清除数据会产生堆碎片。 Go1.5 三色标记法 把对象分为白色、灰色、黑色三种类型 白色对象：潜在的垃圾对象，其内存可能会被回收； 黑色对象：活跃对象，包括不存在任何引用外部指针的对象以及从根对象可达的对象； 灰色对象：活跃对象，存在指向白色对象的外部指针，垃圾收集器会扫描这些对象的子对象。 执行过程 从根节点遍历所有对象，从白色对象的集合中取出一个对象将其标记为灰色； 遍历灰色对象集合，从灰色集合中取出一个对象并将其引用的对象标记为灰色，将其本身标记为黑色； 重复第三步，直至灰色对象集合中无任何对象； 回收白色对象集合中所有的对象。 在并发或增量执行时如果 STW 会影响性能，否则会产生悬挂指针，即没有任何指针指向该对象，影响内存安全性。想要并发或增量标记对象需要使用屏障技术。
屏障技术 三色标记混合写屏障 总结 Go1.</description></item><item><title>GMP 模型与调度过程</title><link>https://www.abtswath.com/goroutine/</link><pubDate>Fri, 21 Oct 2022 16:20:35 +0800</pubDate><guid>https://www.abtswath.com/goroutine/</guid><description>GMP模型 G Goroutine 是 Go 语言调度器中待执行的任务，类似操作系统中的线程，但占用内存低且上下文切换开销小。
M Machine 指操作系统线程。调度器最多创建 10000 个线程，但最多只会有 GOMAXPROCS 个线程处在活跃状态。
GOMAXPROCS 默认为 CPU 核数，可以使用 runtime.GOMAXPROCS 修改。
P Processor 处理器是线程与 goroutine 之间的中间层，能够提供线程运行所需的上下文环境，也会负责调度线程上的任务队列。
调度器在启动时会创建 GOMAXPROCS 个处理器，所以处理器数量一定等于 GOMAXPROCS，这些处理器会绑定到不同的内核线程上。
P 的本地队列同全局队列类似，存放的也是等待运行的 G，但数量有限，最多不超过 256 个。新建 G 时，会优先加入到本地队列，如果本地队列已满，会把本地队列中一半的 G 移动到全局队列。
调度过程 启动调度器； 设置处理器数量，通过指针将线程 m0 与处理器 p0 绑定，将 p0 之外的处理器加入到全局空闲队列中； 初始化 Goroutine 结构体，将结构体放到队列中，本地队列还有剩余空间时是处理器本地队列，本地队列没有剩余空间时是全局队列； 调度循环： 当全局队列中有待执行的 Goroutine 时，保证有一定几率从全局运行队列中查找对应 Goroutine； 从处理器本地队列中查找 Goroutine； 阻塞地查找 Goroutine： 从本地队列、全局队列中查找 Goroutine； 从网络轮询器中查找 Goroutine； 尝试从其他随机的处理器中窃取待运行的 Goroutine。</description></item><item><title>如何将自己的依赖包发布到 Composer Packagist</title><link>https://www.abtswath.com/publish-composer-package-to-packagist/</link><pubDate>Tue, 10 Aug 2021 17:09:51 +0000</pubDate><guid>https://www.abtswath.com/publish-composer-package-to-packagist/</guid><description>准备工作 Github 账号 Packagist 账号 创建 git 仓库 GitHub 创建仓库并克隆到本地。
git clone git@github.com:Great233/url.git composer 初始化 composer init 输入包名称、描述、作者、协议、依赖等信息，回车结束。最终会生成composer.json配置文件，文件内容如下：
{ &amp;#34;name&amp;#34;: &amp;#34;abtswiath/url&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;A library to parse URL, support parameters with the same name&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;library&amp;#34;, &amp;#34;require&amp;#34;: { &amp;#34;php&amp;#34;: &amp;#34;&amp;gt;=7.2&amp;#34; }, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;license&amp;#34;: &amp;#34;MIT&amp;#34;, &amp;#34;autoload&amp;#34;: { &amp;#34;psr-4&amp;#34;: { &amp;#34;Url\\&amp;#34;: &amp;#34;src/Url/&amp;#34; } }, &amp;#34;authors&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Great&amp;#34; } ], &amp;#34;require-dev&amp;#34;: { &amp;#34;phpunit/phpunit&amp;#34;: &amp;#34;^9.5&amp;#34; }, &amp;#34;support&amp;#34;: { &amp;#34;issues&amp;#34;: &amp;#34;https://github.com/Great233/url/issues&amp;#34;, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/Great233/url&amp;#34; } } 提交代码至 Github 代码编写完成并且测试无误之后提交到 Github。</description></item><item><title>openjdk 8 maven 下载项目依赖时遇到的问题</title><link>https://www.abtswath.com/maven-invalid-algorithm-parameter-exception/</link><pubDate>Tue, 27 Jul 2021 17:04:55 +0000</pubDate><guid>https://www.abtswath.com/maven-invalid-algorithm-parameter-exception/</guid><description>错误信息 [ERROR] Plugin org.apache.maven.plugins:maven-surefire-plugin:2.22.2 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-surefire-plugin:jar:2.22.2: Could not transfer artifact org.apache.maven.surefire:surefire:pom:2.22.2 from/to aliyunmaven (https://maven.aliyun.com/repository/public): transfer failed for https://maven.aliyun.com/repository/public/org/apache/maven/surefire/surefire/2.22.2/surefire-2.22.2.pom: java.lang.RuntimeException: Unexpected error: java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty -&amp;gt; [Help 1] 截图如下 问题原因及解决方案 报错提示大致是https证书安全检查问题，以下是搜索引擎加自己尝试得出的一些解决方案：
1. 使用 http 的镜像源，例如： &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;aliyunmaven&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;阿里云公共仓库&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/repository/public&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; 此方案确实可以解决一部分问题，但还是有些 jar 包会出现同样的错误，具体原因未深究。
2. 生成证书并导入到 jre security 中 首先到处 https 证书，然后使用 keytool 导入证书：</description></item><item><title>Redis 分布式锁之 RedLock</title><link>https://www.abtswath.com/redis-distributed-lock/</link><pubDate>Thu, 22 Jul 2021 21:01:01 +0000</pubDate><guid>https://www.abtswath.com/redis-distributed-lock/</guid><description>使用场景 分布式场景下保证同一时刻内只能有一个客户端对资源进行操作。
保证分布式锁有效性及安全性的要求 互斥性：任何时刻只能有一个客户端持有锁。 可重入：总是可以获取锁，即使锁定资源的客户端崩溃，避免死锁。 高可用：只要大多数 Redis 节点已启动，客户端就可以获取锁和释放锁。 获取锁 以毫秒为单位获取当前时间戳。 以相同的键名和值尝试获取所有实例的锁。 客户端以当前时间减去开始获取锁的时间得到锁使用的时间。当大多数Redis节点（N/2+1）获取到锁并且锁使用时间小于锁的失效时间，锁才算获取成功。 如果获取到锁，锁的真正有效时间为步骤三计算结果。 如果获取锁失败，客户端应该在所有实例上进行解锁。 释放锁 向所有的 Redis 实例发送释放锁的命令，不用关心之前有没有成功获取到锁。</description></item></channel></rss>